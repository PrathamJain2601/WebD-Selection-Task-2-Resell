  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
  }
model User {
  id          Int                  @id @default(autoincrement())
  email       String               @unique
  username    String               @unique
  name        String
  password    String
  otp         String?   
  isOtpValid  DateTime? 
  isVerified  Boolean?             @default(false)
  phone       String?              @unique
  location    String?

  transactions TransactionHistory[]
  products     Product[]
  favorites    Product[]           @relation("UserFavorites")
  cart         CartProduct[]
}

model TransactionHistory {
  id          Int       @id @default(autoincrement())
  amount      Float
  date        DateTime  @default(now())
  description String?
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  items       TransactionItem[] // New relation to hold items in the transaction
}

model TransactionItem {
  id              Int       @id @default(autoincrement())
  transactionId   Int
  productId       Int
  quantity        Int

  transaction     TransactionHistory @relation(fields: [transactionId], references: [id])
  product         Product            @relation(fields: [productId], references: [id])

  @@unique([transactionId, productId]) // Ensure each product appears only once per transaction
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Float
  quantity    Int
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  favoritedBy User[]    @relation("UserFavorites")
  cartItems    CartProduct[]
  transactionItems TransactionItem[] // Add this line to establish the opposite relation
}

model CartProduct {
  id        Int       @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int       // Quantity of the product in the user's cart
  
  user      User      @relation(fields: [userId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])

  @@unique([userId, productId]) // Ensure each user can have only one entry for each product in their cart
}
